<%- include("../../views/partials/user/header") %>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>

<!-- Bootstrap 5.3 bundle with Popper (required for Modal JS) -->
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-...your-integrity-hash..." crossorigin="anonymous"></script>
<div class="container mt-5">
  <h2 class="mb-4">Review Your Order</h2>

  <div class="row">
    <!-- Delivery Address -->
    <div class="col-md-6 mb-4">
      <div class="card p-3">
        <h4 class="mb-3">Select Delivery Address</h4>
        <% if (addresses && addresses.length > 0) { %>
          <% addresses.forEach((address, index) => { %>
            <div class="form-check mb-2">
              <input class="form-check-input" type="radio" name="selectedAddress" id="address<%= index %>" value="<%= address._id %>" <%= index === 0 ? 'checked' : '' %>>
              <label class="form-check-label" for="address<%= index %>">
                <strong><%= address.name %></strong><br>
                <%= address.house %>, <%= address.city %>, <%= address.state %> - <%= address.pincode %><br>
                Phone: <%= address.phone %>
              </label>
            </div>
          <% }) %>
        <% } else { %>
          <p>No address found. Please add one.</p>
        <% } %>
        <!-- Trigger Modal -->
        <button class="btn btn-outline-primary mt-3" onclick="openAddressForm()">+ Add New Address</button>
      </div>
    </div>

    <!-- Product Summary -->
    <div class="col-md-6 mb-4">
      <div class="card p-4 shadow-sm d-flex flex-column align-items-start">
        <% if (item.product) { %>
          <div class="d-flex mb-3">
            <img src="<%= item.product.productImages[0] %>" alt="Product Image" class="me-3 rounded" style="width: 100px; height: 100px; object-fit: cover;">
            <div>
              <h5><%= item.product.productName %></h5>
              <p class="mb-1">Brand: <%= item.product.brand %></p>
              <p class="mb-1">Qty: <%= item.quantity %></p>
              <p class="mb-1">Size: <%= item.variant %></p>
              <div class="d-flex align-items-center">
                <strong class="me-2 final-price">₹<%= item.totalPrice %></strong>
                <del class="text-muted">₹<%= item.product.regularPrice * item.quantity %></del>
              </div>
              <small class="text-success discount-amount">
                You save ₹<%= (item.product.regularPrice - item.product.salePrice) * item.quantity %>
              </small>
            </div>
          </div>
          <% if(Number(item.product.salePrice) * Number(item.quantity) >= 500) { %>
            <div>
              <button class="btn btn-sm btn-warning" data-bs-toggle="modal" data-bs-target="#applyCouponModal">Apply Coupon</button>
            </div>
            <%}%>
            <div class="price-section">
              ₹<span class="final-price"><%= item.totalPrice %></span>
              <span class="discount-amount"></span>
            </div>
            <!-- Modify the payment form to include these changes -->
            <form action="/payment" method="POST" class="w-100">
              <input type="hidden" name="productId" value="<%= item.product._id %>">
              <input type="hidden" name="quantity" value="<%= item.quantity %>">
              <input type="hidden" name="variant" value="<%= item.variant %>">
              <input type="hidden" name="totalPrice" id="totalPriceInput" value="<%= item.totalPrice %>">
              <input type="hidden" id="selectedAddressInput" name="selectedAddress" value="">
              <!-- New hidden field for coupon ID -->
              <input type="hidden" id="couponIdInput" name="couponId" value="">
              <button type="submit" class="btn btn-success w-100 mt-3">Proceed to Payment</button>
            </form>
        <% } %>
      </div>
    </div> 
  </div>
</div>

<!-- Apply Coupon Modal -->
<div class="modal fade" id="applyCouponModal" tabindex="-1" aria-hidden="true">
<div class="modal-dialog">
<form id="couponForm" class="modal-content">
<div class="modal-header">
<h5 class="modal-title">Apply Coupon</h5>
<button type="button" class="btn-close" data-bs-dismiss="modal"></button>
</div>
<div class="modal-body">
<div class="mb-2">
<h4 class="mb-3">Apply Coupon</h4>

<!-- Show remove option if coupon is already applied -->
<div id="removeCouponSection" class="alert alert-info" style="display: none;">
  <div class="d-flex justify-content-between align-items-center">
    <div class="fw-bold text-success">✓ Coupon Applied</div>
    <button type="button" id="removeCouponBtn" class="btn btn-sm btn-outline-danger">Remove Coupon</button>
  </div>
</div>

<% const eligibleCoupons = coupons.filter(coupon => item.product.salePrice >= coupon.price); %>
<% if (eligibleCoupons && eligibleCoupons.length > 0) { %>
<% eligibleCoupons.forEach(function(coupon, index) { %>
<div class="form-check mb-2">
<input class="form-check-input" type="radio"
name="selectedCoupons"
id="coupon<%= index %>"
value="<%= coupon._id %>"
data-discount="<%= coupon.discount %>"
<%= index === 0 ? 'checked' : '' %>>
<label class="form-check-label" for="coupon<%= index %>">
<strong><%= coupon.name %></strong><br>
 Coupon Code: <%= coupon.code %><br>
 Coupon Validity: <%= coupon.validDays %> days<br>
 Discount: <%= coupon.discount %>%
</label>
</div>
<% }) %>
<% } else { %>
<p>No eligible coupons found for this purchase.</p>
<% } %>
</div>
</div>
<div class="modal-footer">
<button type="submit" class="btn btn-success">Apply</button>
<button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
</div>
</form>
</div>
</div>

<!-- Address Modal -->
<div id="addressModal" class="modal-overlay" style="display: none;">
  <div class="modal-content card address-form-wrapper position-relative">
    <span class="close-btn" onclick="closeAddressForm()">×</span>
    <h3 style="color: #046963; margin-bottom: 30px;">Create User Address</h3>
    <form id="addressForm" method="POST" action="/addAddressinorder">
      <div class="row mb-3">
        <div class="form-group col-md-4">
          <label for="addressType">Address Type:</label>
          <select class="form-control" id="addressType" name="addressType" required>
            <option value="" disabled selected>Select address type</option>
            <option value="Home">Home</option>
            <option value="Work">Work</option>
            <option value="Other">Other</option>
          </select>
        </div>
        <div class="form-group col-md-4">
          <label for="name">Name:</label>
          <input type="text" class="form-control" id="name" name="name">
        </div>
        <div class="form-group col-md-4">
          <label for="city">City:</label>
          <input type="text" class="form-control" id="city" name="city">
        </div>
      </div>

      <div class="row mb-3">
        <div class="form-group col-md-4">
          <label for="landMark">Landmark:</label>
          <input type="text" class="form-control" id="landMark" name="landMark">
        </div>
        <div class="form-group col-md-4">
          <label for="state">State:</label>
          <input type="text" class="form-control" id="state" name="state">
        </div>
        <div class="form-group col-md-4">
          <label for="pincode">Pincode:</label>
          <input type="number" class="form-control" id="pincode" name="pincode">
        </div>
      </div>

      <div class="row mb-3">
        <div class="form-group col-md-4">
          <label for="phone">Phone:</label>
          <input type="number" class="form-control" id="phone" name="phone">
        </div>
        <div class="form-group col-md-6">
          <label for="altPhone">Alternate Phone:</label>
          <input type="text" class="form-control" id="altPhone" name="altphone">
        </div>
      </div>

      <div id="formErrors" class="mb-3"></div>

      <button type="submit" class="btn btn-success">Submit</button>
    </form>
  </div>
</div>

<style>
  .modal-overlay {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: rgba(0,0,0,0.6);
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 1000;
    padding: 15px;
  }

  .modal-content {
    background: #fff;
    padding: 40px;
    border-radius: 10px;
    max-width: 900px;
    width: 100%;
    max-height: 90vh;
    overflow-y: auto;
    position: relative;
  }

  /* Responsive adjustments for mobile devices */
  @media (max-width: 768px) {
    .modal-overlay {
      padding: 10px;
      align-items: flex-start;
      padding-top: 20px;
    }

    .modal-content {
      padding: 20px;
      max-height: 95vh;
      width: 100%;
      margin: 0;
      border-radius: 8px;
    }

    .modal-content h3 {
      font-size: 1.3rem;
      margin-bottom: 20px !important;
    }

    .modal-content .form-group {
      margin-bottom: 15px;
    }

    .modal-content .form-control {
      padding: 10px;
      font-size: 14px;
    }

    .modal-content .btn {
      padding: 10px 20px;
      font-size: 14px;
    }
  }

  @media (max-width: 480px) {
    .modal-overlay {
      padding: 5px;
      padding-top: 10px;
    }

    .modal-content {
      padding: 15px;
      max-height: 98vh;
      border-radius: 5px;
    }

    .modal-content h3 {
      font-size: 1.2rem;
      margin-bottom: 15px !important;
    }

    .modal-content .row {
      margin: 0;
    }

    .modal-content .col-md-4,
    .modal-content .col-md-6,
    .modal-content .col-md-12 {
      padding: 0 5px;
      margin-bottom: 10px;
    }

    .modal-content .form-control {
      padding: 8px;
      font-size: 13px;
    }

    .modal-content .btn {
      padding: 8px 16px;
      font-size: 13px;
      width: 100%;
      margin-bottom: 10px;
    }

    .close-btn {
      top: 10px !important;
      right: 10px !important;
      font-size: 20px !important;
    }
  }

  .close-btn {
    position: absolute;
    right: 20px;
    top: 15px;
    font-size: 28px;
    font-weight: bold;
    color: #aaa;
    cursor: pointer;
  }

  .close-btn:hover {
    color: #000;
  }

  .text-danger {
    color: #dc3545;
    font-size: 0.875rem;
    margin-top: 5px;
    display: block;
  }
</style>

<script>

document.addEventListener('DOMContentLoaded', function() {
  // Get references to important elements
  const couponForm = document.getElementById('couponForm');
  const totalPriceInput = document.getElementById('totalPriceInput');
  const finalPriceElements = document.querySelectorAll('.final-price');
  const discountAmountElement = document.querySelector('.discount-amount');
  const couponIdInput = document.getElementById('couponIdInput');
  const couponBtn = document.querySelector('[data-bs-target="#applyCouponModal"]');
  const removeCouponSection = document.getElementById('removeCouponSection');
  const removeCouponBtn = document.getElementById('removeCouponBtn');
  
  // Track if a coupon has been applied
  let activeCouponId = null;
  let originalPrice = parseFloat(totalPriceInput.value);
  
  // Handle coupon application
  couponForm.addEventListener('submit', function(e) {
    e.preventDefault();
    
    // Get the selected coupon
    const selectedCoupon = document.querySelector('input[name="selectedCoupons"]:checked');
    
    if (selectedCoupon) {
      const couponId = selectedCoupon.value;
      const discountLabel = selectedCoupon.dataset.discount;
      const discountPercent = parseFloat(discountLabel);
      
      // Calculate the new price after discount
      const discountAmount = (originalPrice * discountPercent / 100);
      const newPrice = originalPrice - discountAmount;
      
      // Update the hidden input for the payment form
      totalPriceInput.value = newPrice.toFixed(2);
      couponIdInput.value = couponId;
      
      // Update the displayed price on the page
      finalPriceElements.forEach(el => {
        el.textContent = newPrice.toFixed(2);
      });
      
      // Update the discount amount display
      if (discountAmountElement) {
        discountAmountElement.textContent = `You save ₹${discountAmount.toFixed(2)} with coupon`;
        discountAmountElement.classList.add('fw-bold');
        discountAmountElement.classList.add('text-success');
      }
      
      // Close the modal - FIXED VERSION
      const modalElement = document.getElementById('applyCouponModal');
      const modalBackdrop = document.querySelector('.modal-backdrop');
      
      // Hide the modal properly
      jQuery(modalElement).modal('hide');
      
      // Remove modal backdrop if it exists
      if (modalBackdrop) {
        modalBackdrop.remove();
      }
      
      // Remove modal-open class from body
      document.body.classList.remove('modal-open');
      document.body.style.overflow = '';
      document.body.style.paddingRight = '';
      
      // Update the coupon button to show applied state
      updateCouponButton(true);
      
      // Set the active coupon
      activeCouponId = couponId;
      
      // Show success message after modal closes
      setTimeout(() => {
        showAlert('Coupon applied successfully!', 'success');
      }, 300);
    }
  });
  
  // NEW: Handle coupon removal
  removeCouponBtn.addEventListener('click', function(e) {
    e.preventDefault();
    
    // Reset to original price
    totalPriceInput.value = originalPrice.toFixed(2);
    couponIdInput.value = '';
    
    // Update the displayed price on the page
    finalPriceElements.forEach(el => {
      el.textContent = originalPrice.toFixed(2);
    });
    
    // Reset the discount amount display
    if (discountAmountElement) {
      discountAmountElement.textContent = '';
      discountAmountElement.classList.remove('fw-bold', 'text-success');
    }
    
    // Update the coupon button to show default state
    updateCouponButton(false);
    
    // Clear the active coupon
    activeCouponId = null;
    
    // Clear all radio button selections
    const coupons = document.querySelectorAll('input[name="selectedCoupons"]');
    coupons.forEach(coupon => {
      coupon.checked = false;
    });
    
    // Close the modal
    const modalElement = document.getElementById('applyCouponModal');
    const modalBackdrop = document.querySelector('.modal-backdrop');
    
    // Hide the modal properly
    jQuery(modalElement).modal('hide');
    
    // Remove modal backdrop if it exists
    if (modalBackdrop) {
      modalBackdrop.remove();
    }
    
    // Remove modal-open class from body
    document.body.classList.remove('modal-open');
    document.body.style.overflow = '';
    document.body.style.paddingRight = '';
    
    // Show success message after modal closes
    setTimeout(() => {
      showAlert('Coupon removed successfully!', 'info');
    }, 300);
  });
  
  // Function to update the coupon button appearance
  function updateCouponButton(isApplied) {
    if (isApplied) {
      couponBtn.textContent = 'Coupon Applied ✓';
      couponBtn.classList.remove('btn-warning');
      couponBtn.classList.add('btn-success');
    } else {
      couponBtn.textContent = 'Apply Coupon';
      couponBtn.classList.remove('btn-success');
      couponBtn.classList.add('btn-warning');
    }
  }
  
  // Function to display an alert message
  function showAlert(message, type) {
    // Create alert element
    const alertDiv = document.createElement('div');
    alertDiv.className = `alert alert-${type} alert-dismissible fade show`;
    alertDiv.role = 'alert';
    alertDiv.innerHTML = `
      ${message}
      <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    `;
    
    // Insert alert before the product card
    const productCard = document.querySelector('.card.p-4.shadow-sm');
    if (productCard && productCard.parentNode) {
      productCard.parentNode.insertBefore(alertDiv, productCard);
    
      // Auto-dismiss after 5 seconds
      setTimeout(() => {
        alertDiv.classList.remove('show');
        setTimeout(() => {
          alertDiv.remove();
        }, 150);
      }, 5000);
    }
  }
  
  // When the modal opens, pre-select the currently active coupon if there is one
  const couponModal = document.getElementById('applyCouponModal');
  if (couponModal) {
    couponModal.addEventListener('show.bs.modal', function() {
      // Show/hide remove coupon section based on whether a coupon is applied
      if (activeCouponId) {
        removeCouponSection.style.display = 'block';
        const coupons = document.querySelectorAll('input[name="selectedCoupons"]');
        coupons.forEach(coupon => {
          coupon.checked = (coupon.value === activeCouponId);
        });
      } else {
        removeCouponSection.style.display = 'none';
      }
    });
  }
});



function openAddressForm() {
  document.getElementById('addressModal').style.display = 'flex';
}

function closeAddressForm() {
  document.getElementById('addressModal').style.display = 'none';
}

// REMOVE THIS - DUPLICATE EVENT LISTENER
// document.getElementById('addressForm').addEventListener('submit', function (event) {
//   if (!validateForm()) {
//     event.preventDefault();
//   }
// });

function showFieldError(field, message) {
  const input = document.getElementById(field);
  const errorDiv = document.createElement('div');
  errorDiv.className = "text-danger";
  errorDiv.textContent = message;
  errorDiv.id = field + "-error";
  input.parentNode.appendChild(errorDiv);
}

function validateForm() {
  let isValid = true;
  const requiredFields = ["addressType", "name", "city", "landMark", "state", "pincode", "phone", "altPhone"];
  const formErrors = document.getElementById('formErrors');
  formErrors.innerHTML = '';

  requiredFields.forEach((field) => {
    const existingError = document.getElementById(field + '-error');
    if (existingError) existingError.remove();
    const input = document.getElementById(field);
    const value = input.value.trim();
    if (!value) {
      showFieldError(field, 'This field is required.');
      isValid = false;
    }
  });

  const namePattern = /^[A-Za-z\s]+$/;
  const pincodePattern = /^\d{6}$/;
  const phonePattern = /^\d{10}$/;

  const name = document.getElementById('name').value.trim();
  const city = document.getElementById('city').value.trim();
  const landMark = document.getElementById('landMark').value.trim();
  const state = document.getElementById('state').value.trim();
  const pincode = document.getElementById('pincode').value.trim();
  const phone = document.getElementById('phone').value.trim();
  const altPhone = document.getElementById('altPhone').value.trim();

  if (name && !namePattern.test(name)) {
    showFieldError('name', 'Name should contain alphabets only.');
    isValid = false;
  }
  if (city && !namePattern.test(city)) {
    showFieldError('city', 'City should contain alphabets only.');
    isValid = false;
  }
  if (landMark && !namePattern.test(landMark)) {
    showFieldError('landMark', 'Landmark should contain alphabets only.');
    isValid = false;
  }
  if (state && !namePattern.test(state)) {
    showFieldError('state', 'State should contain alphabets only.');
    isValid = false;
  }
  if (pincode && !pincodePattern.test(pincode)) {
    showFieldError('pincode', 'Pincode should be a 6-digit number.');
    isValid = false;
  }
  if (phone && !phonePattern.test(phone)) {
    showFieldError('phone', 'Phone number should be a 10-digit number.');
    isValid = false;
  }
  if (altPhone && !phonePattern.test(altPhone)) {
    showFieldError('altPhone', 'Alternate phone should be a 10-digit number.');
    isValid = false;
  }
  if (phone && altPhone && phone === altPhone) {
    showFieldError('altPhone', 'Alternate number must be different.');
    isValid = false;
  }

  return isValid;
}

// KEEP ONLY THIS EVENT LISTENER
document.getElementById('addressForm').addEventListener('submit', function (event) {
  event.preventDefault(); // Always prevent default form submission
  
  if (!validateForm()) {
      return; // Stop if validation fails
  }
  
  // Get form data as an object instead of FormData
  const formData = {
      addressType: document.getElementById('addressType').value,
      name: document.getElementById('name').value,
      city: document.getElementById('city').value,
      landMark: document.getElementById('landMark').value,
      state: document.getElementById('state').value,
      pincode: document.getElementById('pincode').value,
      phone: document.getElementById('phone').value,
      altphone: document.getElementById('altPhone').value // Note: using altphone to match backend
  };
  
  console.log("Sending data:", formData); // Debug log
  
  fetch('/addAddressinorder', {
      method: 'POST',
      headers: {
          'Content-Type': 'application/json', // Send as JSON
      },
      body: JSON.stringify(formData)
  })
  .then(response => {
      if (response.ok) {
          return response.json();
      }
      throw new Error('Network response was not ok');
  })
  .then(data => {
      if (data.success) {
          // Close the modal
          closeAddressForm();
          
          // Reset the form
          document.getElementById('addressForm').reset();
          
          // Clear any existing error messages
          document.getElementById('formErrors').innerHTML = '';
          
          // Dynamically add the new address to the list without reload
          addNewAddressToList(data.newAddress);
      } else {
          showError(data.message || 'Failed to add address');
      }
  })
  .catch(error => {
      console.error('Error:', error);
      showError('An error occurred while adding the address');
  });
});

function showError(message) {
  const formErrors = document.getElementById('formErrors');
  formErrors.innerHTML = `<div class="alert alert-danger">${message}</div>`;
}

function addNewAddressToList(newAddress) {
  console.log("Adding new address to list:", newAddress); // Debug log
  
  // Find the address container more reliably
  const addressContainer = document.querySelector('.card .mb-3').parentNode;
  if (!addressContainer) {
      console.log("Address container not found, reloading page");
      location.reload();
      return;
  }
  
  // Remove "No address found" message if it exists
  const noAddressMsg = addressContainer.querySelector('p');
  if (noAddressMsg && noAddressMsg.textContent.includes('No address found')) {
      noAddressMsg.remove();
  }
  
  // Get current address count for radio button indexing
  const existingAddresses = document.querySelectorAll('input[name="selectedAddress"]').length;
  
  // Create new address HTML - match the exact format from your EJS template
  const newAddressHTML = `
      <div class="form-check mb-2">
          <input class="form-check-input" type="radio" name="selectedAddress" id="address${existingAddresses}" value="${newAddress._id}">
          <label class="form-check-label" for="address${existingAddresses}">
              <strong>${newAddress.name}</strong><br>
              ${newAddress.landMark}, ${newAddress.city}, ${newAddress.state} - ${newAddress.pincode}<br>
              Phone: ${newAddress.phone}
          </label>
      </div>
  `;
  
  // Insert before the "Add New Address" button
  const addButton = addressContainer.querySelector('button');
  if (addButton) {
      addButton.insertAdjacentHTML('beforebegin', newAddressHTML);
      console.log("Address added successfully to DOM");
  } else {
      console.log("Add button not found, reloading page");
      location.reload();
  }
}


    // Set selected address before submitting the payment form
    const paymentForm = document.querySelector('form[action="/payment"]');
    if (paymentForm) {
      paymentForm.addEventListener('submit', function (event) {
        const selected = document.querySelector('input[name="selectedAddress"]:checked');
        if (selected) {
          document.getElementById('selectedAddressInput').value = selected.value;
        } else {
          event.preventDefault();
          alert("Please select a delivery address before proceeding.");
        }
      });
    }
  </script>

<%- include("../../views/partials/user/footer") %>