<%- include("../../views/partials/user/header") %>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
<style>
  .modal-overlay {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: rgba(0,0,0,0.6);
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 1000;
    padding: 15px;
  }

  .modal-content {
    background: #fff;
    padding: 40px;
    border-radius: 10px;
    max-width: 900px;
    width: 100%;
    max-height: 90vh;
    overflow-y: auto;
    position: relative;
  }

  /* Responsive adjustments for mobile devices */
  @media (max-width: 768px) {
    .modal-overlay {
      padding: 10px;
      align-items: flex-start;
      padding-top: 20px;
    }

    .modal-content {
      padding: 20px;
      max-height: 95vh;
      width: 100%;
      margin: 0;
      border-radius: 8px;
    }

    .modal-content h3 {
      font-size: 1.3rem;
      margin-bottom: 20px !important;
    }

    .modal-content .form-group {
      margin-bottom: 15px;
    }

    .modal-content .form-control {
      padding: 10px;
      font-size: 14px;
    }

    .modal-content .btn {
      padding: 10px 20px;
      font-size: 14px;
    }
  }

  @media (max-width: 480px) {
    .modal-overlay {
      padding: 5px;
      padding-top: 10px;
    }

    .modal-content {
      padding: 15px;
      max-height: 98vh;
      border-radius: 5px;
    }

    .modal-content h3 {
      font-size: 1.2rem;
      margin-bottom: 15px !important;
    }

    .modal-content .row {
      margin: 0;
    }

    .modal-content .col-md-4,
    .modal-content .col-md-6,
    .modal-content .col-md-12 {
      padding: 0 5px;
      margin-bottom: 10px;
    }

    .modal-content .form-control {
      padding: 8px;
      font-size: 13px;
    }

    .modal-content .btn {
      padding: 8px 16px;
      font-size: 13px;
      width: 100%;
      margin-bottom: 10px;
    }

    .close-btn {
      top: 10px !important;
      right: 10px !important;
      font-size: 20px !important;
    }
  }

  .close-btn {
    position: absolute;
    right: 20px;
    top: 15px;
    font-size: 28px;
    font-weight: bold;
    color: #aaa;
    cursor: pointer;
  }

  .close-btn:hover {
    color: #000;
  }

  .text-danger {
    color: #dc3545;
    font-size: 0.875rem;
    margin-top: 5px;
    display: block;
  }

  /* Order Process Typography Improvements */
  .order-process-container {
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
  }

  .order-process-container h1 {
    font-size: 1.75rem;
    font-weight: 600;
    color: #2c3e50;
    margin-bottom: 1.5rem;
  }

  .order-process-container h2 {
    font-size: 1.5rem;
    font-weight: 600;
    color: #34495e;
    margin-bottom: 1.25rem;
  }

  .order-process-container h3 {
    font-size: 1.25rem;
    font-weight: 500;
    color: #34495e;
    margin-bottom: 1rem;
  }

  .order-process-container h4 {
    font-size: 1.1rem;
    font-weight: 500;
    color: #2c3e50;
    margin-bottom: 0.75rem;
  }

  .order-process-container h5 {
    font-size: 1rem;
    font-weight: 500;
    color: #2c3e50;
    margin-bottom: 0.5rem;
  }

  .order-process-container h6 {
    font-size: 0.9rem;
    font-weight: 500;
    color: #34495e;
    margin-bottom: 0.5rem;
  }

  .order-process-container p {
    font-size: 0.875rem;
    line-height: 1.4;
    color: #5a6c7d;
    margin-bottom: 0.5rem;
  }

  .order-process-container .small {
    font-size: 0.8rem;
  }

  .order-process-container .text-muted {
    color: #6c757d !important;
    font-size: 0.8rem;
  }

  .order-process-container .card {
    border: 1px solid #e9ecef;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0,0,0,0.05);
  }

  .order-process-container .card-body {
    padding: 1.25rem;
  }

  .order-process-container .btn {
    font-size: 0.875rem;
    padding: 0.5rem 1rem;
    border-radius: 6px;
    font-weight: 500;
  }

  .order-process-container .btn-sm {
    font-size: 0.8rem;
    padding: 0.375rem 0.75rem;
  }

  .order-process-container .form-check-label {
    font-size: 0.875rem;
    line-height: 1.4;
  }

  .order-process-container .form-check-label strong {
    font-weight: 600;
    color: #2c3e50;
  }

  .order-process-container .price-text {
    font-weight: 600;
    color: #27ae60;
  }

  .order-process-container .discount-text {
    font-size: 0.8rem;
    color: #e67e22;
  }

  .order-process-container .cart-item {
    border-bottom: 1px solid #f8f9fa;
    padding: 1rem 0;
  }

  .order-process-container .cart-item:last-child {
    border-bottom: none;
  }
</style>

<main class="place-order-page py-4 order-process-container">
  <div class="container">
    <h1 class="text-center mb-4">Place Your Order</h1>
    <div class="row">
      <!-- Delivery Address -->
      <div class="col-md-6 mb-4">
        <div class="card">
          <div class="card-body">
            <h4 class="mb-3">Select Delivery Address</h4>
            <% if (addresses && addresses.length > 0) { %>
              <% addresses.forEach((address, index) => { %>
                <div class="form-check mb-3">
                  <input class="form-check-input" type="radio" name="selectedAddress" id="address<%= index %>" value="<%= address._id %>" <%= index === 0 ? 'checked' : '' %>>
                  <label class="form-check-label" for="address<%= index %>">
                    <strong><%= address.name %></strong><br>
                    <span class="text-muted"><%= address.house %>, <%= address.city %>, <%= address.state %> - <%= address.pincode %></span><br>
                    <span class="text-muted small">Phone: <%= address.phone %></span>
                  </label>
                </div>
              <% }) %>
            <% } else { %>
              <p class="text-muted">No address found. Please add one.</p>
            <% } %>

            <button class="btn btn-outline-primary btn-sm mt-2" onclick="openAddressForm()">
              <i class="fas fa-plus me-1"></i>Add New Address
            </button>
          </div>
        </div>
      </div>

      <!-- Order Summary -->
      <div class="col-md-6">
        <div class="card">
          <div class="card-body">
            <h4 class="mb-3">Order Summary</h4>
            <% cartItems.forEach(item => { %>
              <% if (item.product) { %>
                <div class="cart-item">
                  <div class="d-flex">
                    <img src="<%= item.product.productImages[0] %>" alt="Product Image" class="me-3 rounded" style="width: 70px; height: 70px; object-fit: cover;">
                    <div class="flex-grow-1">
                      <h6 class="mb-1"><%= item.product.productName %></h6>
                      <p class="text-muted mb-1">Brand: <%= item.product.brand %></p>
                      <p class="text-muted mb-1">Qty: <%= item.quantity %> | Size: <%= item.variant?.size || 'Not selected' %></p>
                      <div class="d-flex align-items-center mb-1">
                        <span class="price-text me-2">₹<%= item.totalPrice %></span>
                        <del class="text-muted small">₹<%= item.product.regularPrice * item.quantity %></del>
                      </div>
                      <small class="discount-text">
                        You save ₹<%= (item.product.regularPrice - item.product.salePrice) * item.quantity %>
                      </small>
                    </div>
                  </div>
                </div>
              <% } %>
            <% }) %>

            <div class="border-top pt-3 mt-3">
              <div class="d-flex justify-content-between align-items-center mb-2">
                <span class="text-muted">Total Amount:</span>
                <span class="h6 price-text final-price">₹<%= totalAmount %></span>
              </div>
              <div class="discount-amount"></div>
            </div>

            <div class="mb-3">
              <button class="btn btn-warning btn-sm" data-bs-toggle="modal" data-bs-target="#applyCouponModal">
                <i class="fas fa-tag me-1"></i>Apply Coupon
              </button>
            </div>

            <form action="/payment-cart" method="POST">
              <input type="hidden" id="selectedAddressInput" name="selectedAddress" value="">
              <input type="hidden" id="couponIdInput" name="couponId" value="">
              <input type="hidden" id="totalPriceInput" name="finalPrice" value="<%= totalAmount %>">
              <button type="submit" class="btn btn-success w-100">
                <i class="fas fa-credit-card me-2"></i>Continue to Payment
              </button>
            </form>
          </div>
        </div>
      </div>



<!-- Apply Coupon Modal -->
<div class="modal fade" id="applyCouponModal" tabindex="-1" aria-hidden="true">
  <div class="modal-dialog">
    <form id="couponForm" class="modal-content">
      <div class="modal-header">
        <h6 class="modal-title">Apply Coupon</h6>
        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
      </div>
      <div class="modal-body">
        <!-- Remove Coupon Section (shown only when coupon is applied) -->
        <div id="removeCouponSection" class="alert alert-success alert-sm justify-content-between align-items-center mb-3 d-none">
          <div class="small">
            <i class="fas fa-check-circle me-1"></i>
            <span class="fw-bold">Coupon Applied Successfully</span>
          </div>
          <button type="button" id="removeCouponBtn" class="btn btn-sm btn-outline-danger">
            <i class="fas fa-times me-1"></i>Remove
          </button>
        </div>

        <h6 class="mb-3">Available Coupons</h6>
        <% const eligibleCoupons = coupons.filter(coupon => totalAmount >= coupon.price); %>
        <% if (eligibleCoupons.length > 0) { %>
          <% eligibleCoupons.forEach((coupon, index) => { %>
            <div class="form-check mb-3 p-2 border rounded">
              <input class="form-check-input" type="radio"
                name="selectedCoupons"
                id="coupon<%= index %>"
                value="<%= coupon._id %>"
                data-discount="<%= coupon.discount %>"
                <%= index === 0 ? 'checked' : '' %>>
              <label class="form-check-label w-100" for="coupon<%= index %>">
                <div class="d-flex justify-content-between align-items-start">
                  <div>
                    <h6 class="mb-1"><%= coupon.name %></h6>
                    <p class="text-muted small mb-1">Code: <%= coupon.code %></p>
                    <p class="text-muted small mb-0">Valid for: <%= coupon.validDays %> days</p>
                  </div>
                  <div class="text-end">
                    <span class="badge bg-success"><%= coupon.discount %>% OFF</span>
                  </div>
                </div>
              </label>
            </div>
          <% }) %>
        <% } else { %>
          <div class="text-center py-3">
            <i class="fas fa-tag text-muted mb-2" style="font-size: 2rem;"></i>
            <p class="text-muted">No eligible coupons found for this purchase.</p>
          </div>
        <% } %>
      </div>
      <div class="modal-footer">
        <button type="submit" class="btn btn-success btn-sm">Apply Coupon</button>
        <button type="button" class="btn btn-secondary btn-sm" data-bs-dismiss="modal">Cancel</button>
      </div>
    </form>
  </div>
</div>



<!-- Address Modal -->
<div id="addressModal" class="modal-overlay" style="display: none;">
  <div class="modal-content card address-form-wrapper position-relative">
    <span class="close-btn" onclick="closeAddressForm()">×</span>
    <h3 style="color: #046963; margin-bottom: 30px;">Create User Address</h3>
    <form id="addressForm" method="POST" action="/addAddressinorder">
      <div class="row mb-3">
        <div class="form-group col-md-4">
          <label for="addressType">Address Type:</label>
          <select class="form-control" id="addressType" name="addressType" required>
            <option value="" disabled selected>Select address type</option>
            <option value="Home">Home</option>
            <option value="Work">Work</option>
            <option value="Other">Other</option>
          </select>
        </div>
        <div class="form-group col-md-4">
          <label for="name">Name:</label>
          <input type="text" class="form-control" id="name" name="name">
        </div>
        <div class="form-group col-md-4">
          <label for="city">City:</label>
          <input type="text" class="form-control" id="city" name="city">
        </div>
      </div>

      <div class="row mb-3">
        <div class="form-group col-md-4">
          <label for="landMark">Landmark:</label>
          <input type="text" class="form-control" id="landMark" name="landMark">
        </div>
        <div class="form-group col-md-4">
          <label for="state">State:</label>
          <input type="text" class="form-control" id="state" name="state">
        </div>
        <div class="form-group col-md-4">
          <label for="pincode">Pincode:</label>
          <input type="number" class="form-control" id="pincode" name="pincode">
        </div>
      </div>

      <div class="row mb-3">
        <div class="form-group col-md-4">
          <label for="phone">Phone:</label>
          <input type="number" class="form-control" id="phone" name="phone">
        </div>
        <div class="form-group col-md-6">
          <label for="altPhone">Alternate Phone:</label>
          <input type="text" class="form-control" id="altPhone" name="altphone">
        </div>
      </div>

      <div id="formErrors" class="mb-3"></div>

      <button type="submit" class="btn btn-success">Submit</button>
    </form>
  </div>
</div>

</main>

<script>
document.addEventListener('DOMContentLoaded', function() {
 const couponForm = document.getElementById('couponForm');
const totalPriceInput = document.getElementById('totalPriceInput');
const finalPriceElements = document.querySelectorAll('.final-price');
const discountAmountElement = document.querySelector('.discount-amount');
const couponIdInput = document.getElementById('couponIdInput');
const couponBtn = document.querySelector('[data-bs-target="#applyCouponModal"]');
const removeCouponSection = document.getElementById('removeCouponSection');
const removeCouponBtn = document.getElementById('removeCouponBtn');

let activeCouponId = null;
let originalPrice = parseFloat(totalPriceInput.value);

couponForm.addEventListener('submit', function(e) {
e.preventDefault();
const selectedCoupon = document.querySelector('input[name="selectedCoupons"]:checked');
if (selectedCoupon) {
const couponId = selectedCoupon.value;
const discountPercent = parseFloat(selectedCoupon.dataset.discount);
const discountAmount = (originalPrice * discountPercent / 100);
const newPrice = originalPrice - discountAmount;
totalPriceInput.value = newPrice.toFixed(2);
couponIdInput.value = couponId;
finalPriceElements.forEach(el => {
el.textContent = newPrice.toFixed(2);
 });
if (discountAmountElement) {
discountAmountElement.textContent = `You save ₹${discountAmount.toFixed(2)} with coupon`;
discountAmountElement.classList.add('fw-bold', 'text-success');
 }
// Close modal with multiple fallback methods
try {
  const modalElement = document.getElementById('applyCouponModal');
  if (modalElement) {
    // Try to get existing modal instance
    let modal = null;
    if (typeof bootstrap !== 'undefined' && bootstrap.Modal && bootstrap.Modal.getInstance) {
      modal = bootstrap.Modal.getInstance(modalElement);
    }

    if (modal) {
      modal.hide();
    } else {
      // Manual modal close
      modalElement.style.display = 'none';
      modalElement.classList.remove('show');
      modalElement.setAttribute('aria-hidden', 'true');
      modalElement.removeAttribute('aria-modal');
      modalElement.removeAttribute('role');

      // Remove modal-open class from body
      document.body.classList.remove('modal-open');
      document.body.style.overflow = '';
      document.body.style.paddingRight = '';

      // Remove backdrop
      const backdrops = document.querySelectorAll('.modal-backdrop');
      backdrops.forEach(backdrop => backdrop.remove());
    }
  }
} catch (modalError) {
  // Force close everything
  const modalElement = document.getElementById('applyCouponModal');
  if (modalElement) {
    modalElement.style.display = 'none';
    modalElement.classList.remove('show');
  }
  document.body.classList.remove('modal-open');
  document.body.style.overflow = '';
  const backdrops = document.querySelectorAll('.modal-backdrop');
  backdrops.forEach(backdrop => backdrop.remove());
}
updateCouponButton(true);
activeCouponId = couponId;
setTimeout(() => {
showAlert('Coupon applied successfully!', 'success');
 }, 300);
 }
 });

// NEW: Remove Coupon Event Listener
removeCouponBtn.addEventListener('click', function(e) {
  e.preventDefault();
  
  // Reset to original price
  totalPriceInput.value = originalPrice.toFixed(2);
  couponIdInput.value = '';
  
  // Update displayed prices
  finalPriceElements.forEach(el => {
    el.textContent = originalPrice.toFixed(2);
  });
  
  // Clear discount amount display
  if (discountAmountElement) {
    discountAmountElement.textContent = '';
    discountAmountElement.classList.remove('fw-bold', 'text-success');
  }
  
  // Update button appearance
  updateCouponButton(false);
  
  // Clear active coupon
  activeCouponId = null;
  
  // Uncheck all radio buttons
  const coupons = document.querySelectorAll('input[name="selectedCoupons"]');
  coupons.forEach(coupon => {
    coupon.checked = false;
  });
  
  // Close modal with multiple fallback methods
  try {
    const modalElement = document.getElementById('applyCouponModal');
    if (modalElement) {
      let modal = null;
      if (typeof bootstrap !== 'undefined' && bootstrap.Modal && bootstrap.Modal.getInstance) {
        modal = bootstrap.Modal.getInstance(modalElement);
      }

      if (modal) {
        modal.hide();
      } else {
        // Manual modal close
        modalElement.style.display = 'none';
        modalElement.classList.remove('show');
        modalElement.setAttribute('aria-hidden', 'true');
        modalElement.removeAttribute('aria-modal');
        modalElement.removeAttribute('role');
        document.body.classList.remove('modal-open');
        document.body.style.overflow = '';
        document.body.style.paddingRight = '';
        const backdrops = document.querySelectorAll('.modal-backdrop');
        backdrops.forEach(backdrop => backdrop.remove());
      }
    }
  } catch (modalError) {
    // Force close modal
    const modalElement = document.getElementById('applyCouponModal');
    if (modalElement) {
      modalElement.style.display = 'none';
      modalElement.classList.remove('show');
    }
    document.body.classList.remove('modal-open');
    document.body.style.overflow = '';
    const backdrops = document.querySelectorAll('.modal-backdrop');
    backdrops.forEach(backdrop => backdrop.remove());
  }
  
  // Show success message
  setTimeout(() => {
    showAlert('Coupon removed successfully!', 'info');
  }, 300);
});

function updateCouponButton(isApplied) {
if (isApplied) {
couponBtn.textContent = 'Coupon Applied ✓';
couponBtn.classList.remove('btn-warning');
couponBtn.classList.add('btn-success');
 } else {
couponBtn.textContent = 'Apply Coupon';
couponBtn.classList.remove('btn-success');
couponBtn.classList.add('btn-warning');
 }
 }
function showAlert(message, type) {
const alertDiv = document.createElement('div');
alertDiv.className = `alert alert-${type} alert-dismissible fade show mt-3`;
alertDiv.role = 'alert';
alertDiv.innerHTML = `
${message}
 <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
 `;
const targetContainer = document.querySelector('.card.p-3.shadow-sm');
if (targetContainer && targetContainer.parentNode) {
targetContainer.parentNode.insertBefore(alertDiv, targetContainer);
setTimeout(() => {
alertDiv.classList.remove('show');
setTimeout(() => {
alertDiv.remove();
 }, 300);
 }, 5000);
 }
 }

const couponModal = document.getElementById('applyCouponModal');
if (couponModal) {
couponModal.addEventListener('show.bs.modal', function() {
// Show/hide remove coupon section based on active coupon
if (activeCouponId) {
  removeCouponSection.classList.remove('d-none');
  removeCouponSection.classList.add('d-flex');
  const coupons = document.querySelectorAll('input[name="selectedCoupons"]');
  coupons.forEach(coupon => {
    coupon.checked = (coupon.value === activeCouponId);
  });
} else {
  removeCouponSection.classList.add('d-none');
  removeCouponSection.classList.remove('d-flex');
}
 });
 }
});





function openAddressForm() {
  document.getElementById('addressModal').style.display = 'flex';
}

function closeAddressForm() {
  document.getElementById('addressModal').style.display = 'none';
}



function showFieldError(field, message) {
  const input = document.getElementById(field);
  const errorDiv = document.createElement('div');
  errorDiv.className = "text-danger";
  errorDiv.textContent = message;
  errorDiv.id = field + "-error";
  input.parentNode.appendChild(errorDiv);
}

function validateForm() {
  let isValid = true;
  const requiredFields = ["addressType", "name", "city", "landMark", "state", "pincode", "phone", "altPhone"];
  const formErrors = document.getElementById('formErrors');
  formErrors.innerHTML = '';

  requiredFields.forEach((field) => {
    const existingError = document.getElementById(field + '-error');
    if (existingError) existingError.remove();
    const input = document.getElementById(field);
    const value = input.value.trim();
    if (!value) {
      showFieldError(field, 'This field is required.');
      isValid = false;
    }
  });

  const namePattern = /^[A-Za-z\s]+$/;
  const pincodePattern = /^\d{6}$/;
  const phonePattern = /^\d{10}$/;

  const name = document.getElementById('name').value.trim();
  const city = document.getElementById('city').value.trim();
  const landMark = document.getElementById('landMark').value.trim();
  const state = document.getElementById('state').value.trim();
  const pincode = document.getElementById('pincode').value.trim();
  const phone = document.getElementById('phone').value.trim();
  const altPhone = document.getElementById('altPhone').value.trim();

  if (name && !namePattern.test(name)) {
    showFieldError('name', 'Name should contain alphabets only.');
    isValid = false;
  }
  if (city && !namePattern.test(city)) {
    showFieldError('city', 'City should contain alphabets only.');
    isValid = false;
  }
  if (landMark && !namePattern.test(landMark)) {
    showFieldError('landMark', 'Landmark should contain alphabets only.');
    isValid = false;
  }
  if (state && !namePattern.test(state)) {
    showFieldError('state', 'State should contain alphabets only.');
    isValid = false;
  }
  if (pincode && !pincodePattern.test(pincode)) {
    showFieldError('pincode', 'Pincode should be a 6-digit number.');
    isValid = false;
  }
  if (phone && !phonePattern.test(phone)) {
    showFieldError('phone', 'Phone number should be a 10-digit number.');
    isValid = false;
  }
  if (altPhone && !phonePattern.test(altPhone)) {
    showFieldError('altPhone', 'Alternate phone should be a 10-digit number.');
    isValid = false;
  }
  if (phone && altPhone && phone === altPhone) {
    showFieldError('altPhone', 'Alternate number must be different.');
    isValid = false;
  }

  return isValid;
}

// KEEP ONLY THIS EVENT LISTENER
document.getElementById('addressForm').addEventListener('submit', function (event) {
  event.preventDefault(); // Always prevent default form submission
  
  if (!validateForm()) {
      return; // Stop if validation fails
  }
  
  // Get form data as an object instead of FormData
  const formData = {
      addressType: document.getElementById('addressType').value,
      name: document.getElementById('name').value,
      city: document.getElementById('city').value,
      landMark: document.getElementById('landMark').value,
      state: document.getElementById('state').value,
      pincode: document.getElementById('pincode').value,
      phone: document.getElementById('phone').value,
      altphone: document.getElementById('altPhone').value // Note: using altphone to match backend
  };
  
  console.log("Sending data:", formData); // Debug log
  
  fetch('/addAddressinorder', {
      method: 'POST',
      headers: {
          'Content-Type': 'application/json', // Send as JSON
      },
      body: JSON.stringify(formData)
  })
  .then(response => {
      if (response.ok) {
          return response.json();
      }
      throw new Error('Network response was not ok');
  })
  .then(data => {
      if (data.success) {
          // Close the modal
          closeAddressForm();
          
          // Reset the form
          document.getElementById('addressForm').reset();
          
          // Clear any existing error messages
          document.getElementById('formErrors').innerHTML = '';
          
          // Dynamically add the new address to the list without reload
          addNewAddressToList(data.newAddress);
      } else {
          showError(data.message || 'Failed to add address');
      }
  })
  .catch(error => {
      console.error('Error:', error);
      showError('An error occurred while adding the address');
  });
});

function showError(message) {
  const formErrors = document.getElementById('formErrors');
  formErrors.innerHTML = `<div class="alert alert-danger">${message}</div>`;
}

function addNewAddressToList(newAddress) {
  console.log("Adding new address to list:", newAddress); // Debug log
  
  // Find the address container more reliably
  const addressContainer = document.querySelector('.card .mb-3').parentNode;
  if (!addressContainer) {
      console.log("Address container not found, reloading page");
      location.reload();
      return;
  }
  
  // Remove "No address found" message if it exists
  const noAddressMsg = addressContainer.querySelector('p');
  if (noAddressMsg && noAddressMsg.textContent.includes('No address found')) {
      noAddressMsg.remove();
  }
  
  // Get current address count for radio button indexing
  const existingAddresses = document.querySelectorAll('input[name="selectedAddress"]').length;
  
  // Create new address HTML - match the exact format from your EJS template
  const newAddressHTML = `
      <div class="form-check mb-2">
          <input class="form-check-input" type="radio" name="selectedAddress" id="address${existingAddresses}" value="${newAddress._id}">
          <label class="form-check-label" for="address${existingAddresses}">
              <strong>${newAddress.name}</strong><br>
              ${newAddress.landMark}, ${newAddress.city}, ${newAddress.state} - ${newAddress.pincode}<br>
              Phone: ${newAddress.phone}
          </label>
      </div>
  `;
  
  // Insert before the "Add New Address" button
  const addButton = addressContainer.querySelector('button');
  if (addButton) {
      addButton.insertAdjacentHTML('beforebegin', newAddressHTML);
      console.log("Address added successfully to DOM");
  } else {
      console.log("Add button not found, reloading page");
      location.reload();
  }
}
  
    // Set selected address before submitting the payment form
    const paymentForm = document.querySelector('form[action="/payment-cart"]');
    if (paymentForm) {
      paymentForm.addEventListener('submit', function (event) {
        const selected = document.querySelector('input[name="selectedAddress"]:checked');
        if (selected) {
          document.getElementById('selectedAddressInput').value = selected.value;
        } else {
          event.preventDefault();
          alert("Please select a delivery address before proceeding.");
        }
      });
    }
</script>

<%- include("../../views/partials/user/footer") %>