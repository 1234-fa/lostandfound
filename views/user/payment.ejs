<%- include("../../views/partials/user/header") %>

<!-- Payment Process Typography Improvements -->
<style>
  /* Payment Process Typography */
  .payment-process-container {
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
  }

  .payment-process-container h1 {
    font-size: 1.75rem;
    font-weight: 600;
    color: #2c3e50;
    margin-bottom: 1.5rem;
  }

  .payment-process-container h2 {
    font-size: 1.5rem;
    font-weight: 600;
    color: #34495e;
    margin-bottom: 1.25rem;
  }

  .payment-process-container h3 {
    font-size: 1.25rem;
    font-weight: 500;
    color: #34495e;
    margin-bottom: 1rem;
  }

  .payment-process-container h4 {
    font-size: 1.1rem;
    font-weight: 500;
    color: #2c3e50;
    margin-bottom: 0.75rem;
  }

  .payment-process-container h5 {
    font-size: 1rem;
    font-weight: 500;
    color: #2c3e50;
    margin-bottom: 0.5rem;
  }

  .payment-process-container h6 {
    font-size: 0.9rem;
    font-weight: 500;
    color: #34495e;
    margin-bottom: 0.5rem;
  }

  .payment-process-container p {
    font-size: 0.875rem;
    line-height: 1.4;
    color: #5a6c7d;
    margin-bottom: 0.5rem;
  }

  .payment-process-container .small {
    font-size: 0.8rem;
  }

  .payment-process-container .text-muted {
    color: #6c757d !important;
    font-size: 0.8rem;
  }

  .payment-process-container .card {
    border: 1px solid #e9ecef;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0,0,0,0.05);
  }

  .payment-process-container .card-body {
    padding: 1.25rem;
  }

  .payment-process-container .btn {
    font-size: 0.875rem;
    padding: 0.5rem 1rem;
    border-radius: 6px;
    font-weight: 500;
  }

  .payment-process-container .btn-sm {
    font-size: 0.8rem;
    padding: 0.375rem 0.75rem;
  }

  .payment-process-container .form-check-label {
    font-size: 0.875rem;
    line-height: 1.4;
  }

  .payment-process-container .price-text {
    font-weight: 600;
    color: #27ae60;
  }

  .payment-process-container .discount-text {
    font-size: 0.8rem;
    color: #e67e22;
  }

  .payment-process-container .payment-method-card {
    transition: all 0.2s ease;
    cursor: pointer;
  }

  .payment-process-container .payment-method-card:hover {
    box-shadow: 0 4px 8px rgba(0,0,0,0.1);
  }

  .payment-process-container .price-breakdown span {
    font-size: 0.875rem;
  }

  .payment-process-container .address-section p {
    font-size: 0.8rem;
    margin-bottom: 0.25rem;
  }
</style>

<script src="https://checkout.razorpay.com/v1/checkout.js"></script>
<div class="container mt-4 mb-5 payment-process-container">
  <h1 class="text-center mb-4">Complete Your Payment</h1>
  <div class="row">
    <!-- Payment Methods -->
    <div class="col-md-7">
      <h4 class="mb-4">Choose Payment Method</h4>
      <form id="checkoutForm" action="/place-order" method="POST">
        <!-- Hidden Fields to carry data forward -->
        <input type="hidden" name="productId" value="<%= orderSummary.productId %>">
        <input type="hidden" name="quantity" value="<%= orderSummary.quantity %>">
        <input type="hidden" name="variant" value="<%= orderSummary.variant %>">
        <input type="hidden" name="totalPrice" value="<%= orderSummary.total %>">
        <input type="hidden" name="deliveryCharge" value="<%= orderSummary.deliveryCharge %>">
        
        <!-- Coupon information -->
        <% if (orderSummary.couponId) { %>
          <input type="hidden" name="couponId" value="<%= orderSummary.couponId %>">
        <% } %>
        
        <!-- Address Fields -->
        <input type="hidden" name="selected[addressType]" value="<%= selected.addressType %>">
        <input type="hidden" name="selected[name]" value="<%= selected.name %>">
        <input type="hidden" name="selected[city]" value="<%= selected.city %>">
        <input type="hidden" name="selected[landMark]" value="<%= selected.landMark %>">
        <input type="hidden" name="selected[state]" value="<%= selected.state %>">
        <input type="hidden" name="selected[pincode]" value="<%= selected.pincode %>">
        <input type="hidden" name="selected[phone]" value="<%= selected.phone %>">
        <input type="hidden" name="selected[altphone]" value="<%= selected.altphone %>">
        <!-- Store selected address ID in hidden field -->
        <input type="hidden" name="selectedAddress" value="<%= selected._id %>">

        
        <div class="card payment-method-card mb-3">
          <div class="card-body">
            <div class="form-check">
              <div class="d-flex align-items-center justify-content-between">
                <!-- Icon and Details -->
                <div class="d-flex align-items-center gap-3">
                  <img src="https://www.yourtechstory.com/wp-content/uploads/2020/01/razorpay.png" alt="Razorpay" style="height: 28px;">
                  <div>
                    <h6 class="mb-1">Razorpay (Online)</h6>
                    <p class="text-muted small mb-0">Pay securely with cards, UPI, wallets</p>
                  </div>
                </div>
                <input class="form-check-input" type="radio" name="paymentMethod" id="razorpay" value="razorpay" required/>
              </div>
            </div>
          </div>
        </div>

        <!-- Wallet Payment Option -->
        <% if (typeof walletBalance !== 'undefined' && walletBalance >= orderSummary.total) { %>
        <div class="card payment-method-card mb-3">
          <div class="card-body">
            <div class="form-check">
              <div class="d-flex align-items-center justify-content-between">
                <!-- Icon and Details -->
                <div class="d-flex align-items-center gap-3">
                  <i class="fas fa-wallet text-primary" style="font-size: 28px;"></i>
                  <div>
                    <h6 class="mb-1">Wallet Payment</h6>
                    <p class="text-muted small mb-0">Pay using your wallet</p>
                  </div>
                </div>
                <input class="form-check-input" type="radio" name="paymentMethod" id="wallet" value="wallet"/>
              </div>
            </div>
          </div>
        </div>
        <% } else if (typeof walletBalance !== 'undefined' && walletBalance > 0) { %>
        <div class="card payment-method-card mb-3" style="opacity: 0.6;">
          <div class="card-body">
            <div class="form-check">
              <div class="d-flex align-items-center justify-content-between">
                <!-- Icon and Details -->
                <div class="d-flex align-items-center gap-3">
                  <i class="fas fa-wallet text-muted" style="font-size: 28px;"></i>
                  <div>
                    <h6 class="mb-1 text-muted">Wallet Payment</h6>
                    <p class="text-muted small mb-0">Insufficient balance (₹<%= walletBalance.toFixed(2) %> available)</p>
                  </div>
                </div>
                <input class="form-check-input" type="radio" name="paymentMethod" id="wallet" value="wallet" disabled/>
              </div>
            </div>
          </div>
        </div>
        <% } %>

        <%if(orderSummary.total>1000){%>
          <h5 style="color: green;">"Cash on Delivery is available only for orders up to ₹1000."</h5>
          <%}else{%>
            <div class="card p-3 mb-3">
          <div class="form-check">
            <input class="form-check-input" type="radio" name="paymentMethod" id="cod" value="cash_on_delivery">
            <label class="form-check-label" for="cod">
              Cash on Delivery
            </label>
          </div>
        </div>
        <%}%>
        <button type="submit" class="btn btn-primary mt-3">Continue</button>
      </form>
    </div>

    <!-- Order Summary -->
    <div class="col-md-5">
      <h4 class="mb-4">Order Summary</h4>
      <div class="card">
        <div class="card-body">
          <div class="d-flex mb-3">
            <img src="<%= orderSummary.productImages[0] %>" alt="<%= orderSummary.productName %>" class="me-3 rounded" style="width: 80px; height: 80px; object-fit: cover;">
            <div class="flex-grow-1">
              <h6 class="mb-1"><%= orderSummary.productName %></h6>
              <p class="text-muted mb-1">Qty: <%= orderSummary.quantity %> | Size: <%= orderSummary.variant %></p>
              <div class="d-flex align-items-center">
                <span class="price-text me-2">₹<%= orderSummary.price %></span>
                <% if (orderSummary.regularPrice > orderSummary.price) { %>
                  <del class="text-muted small">₹<%= orderSummary.regularPrice %></del>
                <% } %>
              </div>
              <% if (orderSummary.itemCouponDiscount && orderSummary.itemCouponDiscount > 0) { %>
                <div class="text-success small">Coupon Discount: -₹<%= orderSummary.itemCouponDiscount.toFixed(2) %></div>
              <% } %>
              <div class="fw-bold">Net Paid: ₹<%= orderSummary.netPaid.toFixed(2) %></div>
            </div>
          </div>
        
        <hr>
        
        <div class="price-breakdown">
          <div class="d-flex justify-content-between mb-2">
            <span>Price (<%= orderSummary.quantity %> item<%= orderSummary.quantity > 1 ? 's' : '' %>)</span>
            <span>₹<%= orderSummary.originalTotal %></span>
          </div>
          
          <% if (orderSummary.saveAmount > 0) { %>
          <div class="d-flex justify-content-between mb-2">
            <span>Discount</span>
            <span class="text-success">-₹<%= orderSummary.saveAmount %></span>
          </div>
          <% } %>
          
          <div class="d-flex justify-content-between">
            <span>Delivery Charges</span>
            <% if(orderSummary.deliveryCharge > 0) { %>
              <span>₹<%= orderSummary.deliveryCharge %></span>
            <% } else { %>
              <span class="text-success">FREE</span>
            <% } %>
          </div>
          
          <hr>
          
          <div class="d-flex justify-content-between fw-bold">
            <span>Total Amount</span>
            <span>₹<%= orderSummary.total %></span>
          </div>
          
          <% if ((orderSummary.saveAmount + orderSummary.couponDiscount) > 0) { %>
          <div class="text-success mt-2">
            You save ₹<%= (orderSummary.saveAmount + orderSummary.couponDiscount).toFixed(2) %> on this order
          </div>
          <% } %>
        </div>
        
        <hr>
        
        <!-- Wallet Balance Display -->
        <% if (typeof walletBalance !== 'undefined' && walletBalance !== null) { %>
        <div class="wallet-section mb-3">
          <div class="d-flex justify-content-between align-items-center">
            <span class="fw-bold">Wallet Balance:</span>
          </div>
          <% if (walletBalance >= orderSummary.total) { %>
            <div class="text-success small mt-1">
              <i class="fas fa-check-circle"></i> Sufficient balance for this order
            </div>
          <% } else if (walletBalance > 0) { %>
            <div class="text-warning small mt-1">
              <i class="fas fa-exclamation-triangle"></i> Insufficient balance for this order
            </div>
          <% } else { %>
            <div class="text-muted small mt-1">
              <i class="fas fa-info-circle"></i> No wallet balance available
            </div>
          <% } %>
        </div>
        <hr>
        <% } %>
        
          <div class="address-section">
            <h6 class="mb-2">Delivery Address:</h6>
            <p class="mb-1"><strong><%= selected.name %></strong></p>
            <p class="text-muted mb-1"><%= selected.landMark %>, <%= selected.city %></p>
            <p class="text-muted mb-1"><%= selected.state %> - <%= selected.pincode %></p>
            <p class="text-muted mb-0">Phone: <%= selected.phone %><% if (selected.altphone) { %>, <%= selected.altphone %><% } %></p>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
document.getElementById('checkoutForm').addEventListener('submit', async function(e) {
    e.preventDefault();
    const method = document.querySelector('input[name="paymentMethod"]:checked').value;
    
    if (method === 'razorpay') {
      // Get form data for Razorpay
      const productId = document.querySelector('input[name="productId"]').value;
      const quantity = document.querySelector('input[name="quantity"]').value;
      const variant = document.querySelector('input[name="variant"]').value;
      const totalPrice = document.querySelector('input[name="totalPrice"]').value;
      const couponIdInput = document.querySelector('input[name="couponId"]');
      const couponId = couponIdInput?.value || null;
      const deliveryCharge = document.querySelector('input[name="deliveryCharge"]').value;

      const selected = {
  addressType: document.querySelector('input[name="selected[addressType]"]').value,
  name: document.querySelector('input[name="selected[name]"]').value,
  city: document.querySelector('input[name="selected[city]"]').value,
  landMark: document.querySelector('input[name="selected[landMark]"]').value,
  state: document.querySelector('input[name="selected[state]"]').value,
  pincode: document.querySelector('input[name="selected[pincode]"]').value,
  phone: document.querySelector('input[name="selected[phone]"]').value,
  altphone: document.querySelector('input[name="selected[altphone]"]').value
};
      
      // 1. Create Razorpay order
      const res1 = await fetch('/create-razorpay-order', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          productId,
          quantity,
          variant,
          totalPrice,
          deliveryCharge,
          selected,
          couponId : couponId || null
        })
      });
      
      const { order_id, amount } = await res1.json();

      const options = {
        key: '<%= razorpayKey %>', // Use the variable passed from controller
        amount: amount,
        currency: 'INR',
        name: 'Your Store',
        description: 'Order Payment',
        order_id: order_id,
        handler: async function(response) {
          // 3. Verify payment and place order
          const res2 = await fetch('/verify-razorpay-payment', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
              razorpay_order_id: response.razorpay_order_id,
              razorpay_payment_id: response.razorpay_payment_id,
              razorpay_signature: response.razorpay_signature,
              selected,
              productId,
              quantity,
              variant,
              deliveryCharge,
              totalPrice,
              couponId : couponId || null
            })
          });
          const data = await res2.json();
          if (data.success && data.redirect) {
            window.location.href = data.redirect;
          } else {
            window.location.href = '/order-failure';
          }
        }
        ,
      prefill: {
        name: selected.name,
        contact: selected.phone
      },
      theme: {
        color: "#3399cc"
      },
      modal: {
        ondismiss: function () {
          // Handle payment cancellation
          console.log('Payment modal dismissed');
          handlePaymentFailure('USER_CANCELLED', 'Payment cancelled by user');
        }
      }
      };

      const rzp = new Razorpay(options);

      // Handle payment failure
      rzp.on('payment.failed', function (response) {
        console.log('Payment failed:', response.error);
        handlePaymentFailure(
          response.error.code,
          response.error.description,
          response.error.metadata ? response.error.metadata.order_id : order_id
        );
      });

      rzp.open();
    } else if (method === 'wallet') {
      // Handle wallet payment
      const productId = document.querySelector('input[name="productId"]').value;
      const quantity = document.querySelector('input[name="quantity"]').value;
      const variant = document.querySelector('input[name="variant"]').value;
      const totalPrice = document.querySelector('input[name="totalPrice"]').value;
      const couponIdInput = document.querySelector('input[name="couponId"]');
      const couponId = couponIdInput?.value || null;
      const deliveryCharge = document.querySelector('input[name="deliveryCharge"]').value;

      const selected = {
        addressType: document.querySelector('input[name="selected[addressType]"]').value,
        name: document.querySelector('input[name="selected[name]"]').value,
        city: document.querySelector('input[name="selected[city]"]').value,
        landMark: document.querySelector('input[name="selected[landMark]"]').value,
        state: document.querySelector('input[name="selected[state]"]').value,
        pincode: document.querySelector('input[name="selected[pincode]"]').value,
        phone: document.querySelector('input[name="selected[phone]"]').value,
        altphone: document.querySelector('input[name="selected[altphone]"]').value
      };

      try {
        const response = await fetch('/process-wallet-payment', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            productId,
            quantity,
            variant,
            totalPrice,
            selected,
            couponId,
            deliveryCharge
          })
        });

        const data = await response.json();
        
        if (data.success) {
          window.location.href = data.redirect;
        } else {
          alert(data.message || 'Wallet payment failed');
        }
      } catch (error) {
        console.error('Wallet payment error:', error);
        alert('Something went wrong with wallet payment');
      }
    } else {
      // For other payment methods (COD), submit the form normally
      this.submit();
    }
});

// Function to handle payment failures
function handlePaymentFailure(errorCode, errorDescription, razorpayOrderId = null) {
  console.log('🔴 Handling payment failure:', errorCode, errorDescription);

  // Get form data for failure handling
  const productId = document.querySelector('input[name="productId"]').value;
  const quantity = document.querySelector('input[name="quantity"]').value;
  const variant = document.querySelector('input[name="variant"]').value;
  const totalPrice = document.querySelector('input[name="totalPrice"]').value;
  const couponIdInput = document.querySelector('input[name="couponId"]');
  const couponId = couponIdInput?.value || null;
  const deliveryCharge = document.querySelector('input[name="deliveryCharge"]').value;

  const selected = {
    addressType: document.querySelector('input[name="selected[addressType]"]').value,
    name: document.querySelector('input[name="selected[name]"]').value,
    city: document.querySelector('input[name="selected[city]"]').value,
    landMark: document.querySelector('input[name="selected[landMark]"]').value,
    state: document.querySelector('input[name="selected[state]"]').value,
    pincode: document.querySelector('input[name="selected[pincode]"]').value,
    phone: document.querySelector('input[name="selected[phone]"]').value,
    altphone: document.querySelector('input[name="selected[altphone]"]').value
  };

  console.log('📤 Sending payment failure data to server...');

  fetch('/handle-payment-failure', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({
      razorpay_order_id: razorpayOrderId,
      error_code: errorCode,
      error_description: errorDescription,
      productId: productId,
      quantity: quantity,
      variant: variant,
      totalPrice: totalPrice,
      selected: selected,
      couponId: couponId,
      deliveryCharge: deliveryCharge,
      isCartOrder: false
    })
  })
  .then(response => response.json())
  .then(data => {
    console.log('📥 Payment failure response:', data);
    if (data.success) {
      console.log('✅ Failed order created, redirecting to failure page');
      window.location.href = data.redirect;
    } else {
      console.log('❌ Failed to create failed order, redirecting to failure page');
      window.location.href = '/order-failure';
    }
  })
  .catch(error => {
    console.error('❌ Error handling payment failure:', error);
    window.location.href = '/order-failure';
  });
}
</script>

<%- include("../../views/partials/user/footer") %>